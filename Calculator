/**
 * title: 사칙연산 계산기 
 * 사용자가 입력한 수식을 계산하고 결과를 표시합니다.
 * 
 * @autho yun subin
 * @since 2024.10.09
 * 
 * <ul>
 *   <li>2024.10.09: 텍스트 영역 생성과 버튼 생성</li>
 *   <li>2024.10.10: 버튼 이벤트 처리</li>
 *   <li>2024.10.12: 계산 메소드 작성</li>
 *   <li>2024.10.15: 계산 메소드 수정 </li>
 *   <li>2024.10.17: fullTextParsing 메소드 작성</li>
 *   <li>2024.10.19: 중위 표현식을 후위 표현식으로 변환하는 메소드 작성 </li>
 *   <li>2024.10.20: 후위 표현식 메소드 작성</li>
 *   <li>2024.10.21: 연산 수행 메소드 작성</li>
 *   <li>2024.10.22: 오류 수정</li>
 *   <li>2024.10.25: 폰트 추가</li>
 *   <li>2024.11.01: 최종</li>
 * </ul>
 */

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Stack;


public class Calculator extends JFrame {
    
    JTextArea area; // 변수 선언
    ArrayList<String> tokens = new ArrayList<String>(); //입력된 수식 저장할 리스트

    Calculator() {
        setTitle("계산기");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(350, 450); //프레임 크기 
        setLayout(new BorderLayout(5,5));

        showNorth();
        showCenter();

        
        setVisible(true); // 프레임을 보이게 함
    }

    void showNorth() {
        area = new JTextArea(2,1); // 텍스트 영역 크기
        area.setEditable(false); // 편집 불가
        
        area.setFont(new Font("Arial", Font.BOLD, 25));
        add(area, BorderLayout.NORTH);
    }

    void showCenter() {
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(5, 4, 5, 5));

        String[] buttons = {
        	"C", "%", "/", "Back",
            "7", "8", "9", "*",
            "4", "5", "6", "+",
            "1", "2", "3", "-",
            "0", "00", ".", "="
        };
        

        for (int i = 0; i < buttons.length; i++) {
            JButton button = new JButton(buttons[i]); // 버튼 생성
            button.addActionListener(new ButtonClickListener()); // 클릭 이벤트 추가
            
            // 버튼 스타일 설정
            setButtonStyle(button, buttons[i]);

            // 버튼 테두리 없애기
            button.setBorderPainted(false); // 테두리 그리지 않기
            button.setFocusPainted(false); // 포커스 시 테두리 그리지 않기
           

            panel.add(button);
        }

        add(panel, BorderLayout.CENTER);
    }

    private void setButtonStyle(JButton button, String label) {
        // C 버튼
        if (label.equals("C")) {
            button.setBackground(Color.RED); 
            button.setForeground(Color.WHITE); 
            button.setFont(new Font("Arial", Font.BOLD, 20)); 
        } 
        // 연산자 버튼
        else if (label.equals("/") || label.equals("*") || 
                 label.equals("+") || label.equals("-") || label.equals("%")) {
            button.setBackground(Color.GRAY); 
            button.setForeground(Color.WHITE);
            button.setFont(new Font("Arial", Font.BOLD, 20));
        } 
        // = 버튼
        else if (label.equals("=")) {
            button.setBackground(Color.DARK_GRAY); 
            button.setForeground(Color.WHITE); 
            button.setFont(new Font("Arial", Font.BOLD, 20));
        }
        // Back 버튼
        else if (label.equals("Back")) {
            button.setFont(new Font("Arial", Font.BOLD, 15));
        }
        // 숫자 버튼
        else {
            button.setBackground(Color.WHITE); 
            button.setForeground(Color.BLACK); 
            button.setFont(new Font("Arial", Font.BOLD, 20)); 
        }
    }
    

    private class ButtonClickListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            String command = e.getActionCommand(); // 어떤 버튼 눌렸는지
            
            // C가 눌렸을 때  
            if (command.equals("C")) {
                area.setText("");
                tokens.clear();
            }
            //Back이 눌렸을때
            else if(command.equals("Back")) {
            	String currentText=area.getText();
            	if (!currentText.isEmpty()) {
            		area.setText(currentText.substring(0,currentText.length()-1)); //마지막 문자 제거
            	}
            }
            //%가 눌렸을때
            else if (command.equals("%")){
            	String currentText = area.getText();
                if (!currentText.isEmpty()) {
                    double currentValue = Double.parseDouble(currentText);  // 문자열 변환
                    area.setText(Double.toString(currentValue / 100)); 
                }
            }
            // =가 눌렸을 때
            else if (command.equals("=")) {
                String result = Double.toString(calculate(area.getText())); // 메소드 호출  
                area.setText(result);    
                tokens.clear();
            }
            // 이외 버튼 눌렸을 때
            else {
                area.setText(area.getText() + e.getActionCommand()); // 클릭한 버튼 추가
            }
        }
        
        /**
         * 수식을 계산하는 메소드
         * 
         * @param text 입력된 수식
         * @return 계산 결과
         */   
        
        private double calculate(String text) { // 수식 계산하는 메소드
            tokens.clear();
            fullTextParsing(text); // 수식 메소드 호출
            ArrayList<String> postfix = infixToPostfix(tokens); // 중위 표현식을 후위 표현식으로 변환
            return evaluatePostfix(postfix);//후위 표현식
        }
        
        /**
         * 입력된 숫자를 파싱하여 숫자와 연산자로 분리
         * 
         * @param text 입력된 수식
         */
        
		private void fullTextParsing(String text) { // 수식 메소드
			StringBuilder numberBuffer = new StringBuilder(); // 숫자버퍼

            
            for (char c : text.toCharArray()) {
            	if (Character.isDigit(c)|| c == '.') {  // Character 클래스 => 문자관련 메소드 / Character.isDigit => 문자가 숫자인지 확인(true/false)
            		numberBuffer.append(c); // 숫자 또는 소수점이면 추가
            	}
            	else {
            		if(numberBuffer.length()>0) {
            			tokens.add(numberBuffer.toString()); // 완성된 숫자에 토큰 추가
            			numberBuffer.setLength(0); //버퍼 초기화
            		}
            		if(isOperator(String.valueOf(c))) { // 연산자 확인 
            			tokens.add(String.valueOf(c)); // 연산자 추가
            		}
            	}
            }
            if(numberBuffer.length()>0) {
            	tokens.add(numberBuffer.toString()); //마지막 숫자 추가
            }
		}

	    /**
	     * 문자열이 연산자인지 확인
	     * 
	     * @param token 확인할 문자열
	     * @return 연산자 여부
	     */
		
		
		private boolean isOperator(String token) { // 문자열이 연산자인지 확인하는 메소드
			return token.equals("+") || token.equals("-") || token.equals("*") || token.equals("/");
		}
		
	    /**
	     * 중위 표현식을 후위 표현식으로 변환합니다.
	     * 
	     * @param tokens 중위 표현식의 토큰 리스트
	     * @return 후위 표현식의 토큰 리스트
	     * 
	     * @see <a href="https://dlise.tistory.com/63">tistory: 중위후위 표기법 변환</a>
	     */
		
		private ArrayList<String> infixToPostfix(ArrayList<String> tokens) { //중위표현식->후위표현식
			ArrayList<String> output = new ArrayList<>(); // 후위표현식을 저장할 리스트
			Stack<String> stack = new Stack<>(); //연산자를 저장할 스택
			
			 for (String token : tokens) {
	                if (isOperator(token)) {
	                    while (!stack.isEmpty() && precedence(stack.peek()) >= precedence(token)) {
	                        output.add(stack.pop()); // 우선순위가 높은 연산자 처리
	                    }
	                    stack.push(token); // 현재 연산자 추가
	                } else {
	                    output.add(token); // 숫자는 바로 추가
	                }
	            }

	            // 스택에 남아있는 연산자 추가
	            while (!stack.isEmpty()) {
	                output.add(stack.pop());
	            }

	            return output; // 후위 표현식 반환
	        }
		
		 /**
	     * 주어진 연산자의 우선순위를 반환
	     * 
	     * @param operator 확인할 연산자
	     * @return 우선순위 값
	     */
		
        
        private int precedence(String operator) { // 우선순위를 반환하는 메소드
        	switch (operator) {
            case "+":
            case "-":
                return 1; // 덧셈 및 뺄셈의 우선순위
            case "*":
            case "/":
                return 2; // 곱셈 및 나눗셈의 우선순위
            default:
                return 0;
                }
		}

        /**
         * 후위 표현식을 계산
         * 
         * @param postfix 후위 표현식의 토큰 리스트
         * @return 계산 결과
         * 
         * @see <a href="https://jamanbbo.tistory.com/54">tistory 후위 표기 수식 계산</a>
         */
        
        private double evaluatePostfix(ArrayList<String> postfix) {
            Stack<Double> stack = new Stack<>(); // 숫자를 저장할 스택

            for (String token : postfix) {
                if (isOperator(token)) {
                    double b = stack.pop(); // 두 번째 숫자
                    double a = stack.pop(); // 첫 번째 숫자
                    double result = performOperation(a, b, token); // 연산 수행
                    stack.push(result); // 결과를 스택에 추가
                } else {
                    stack.push(Double.parseDouble(token)); // 숫자는 스택에 추가
                }
            }

            return stack.pop(); // 최종 결과 반환
        }
        

        /**
         * 주어진 두 숫자와 연산자를 이용하여 계산을 수행합니다.
         * 
         * @param a 첫 번째 숫자
         * @param b 두 번째 숫자
         * @param operator 적용할 연산자
         * @return 계산 결과
         */ 

		private double performOperation(double a, double b, String operator) { // 숫자와 연산자을 입력 받아 수행
			switch (operator) {
            case "+":
                return a + b; // 덧셈
            case "-":
                return a - b; // 뺄셈
            case "*":
                return a * b; // 곱셈
            case "/":
                return a / b; // 나눗셈
            default:
               return 0;
        }
    }
}
    
    /** 
     * 프로그램의 시작점
     * 
     * @param args 명령줄 인수
     */
    public static void main(String[] args) {
        new Calculator();
    }
}
